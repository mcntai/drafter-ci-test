name: Dev Deployment

on:
  push:
    branches: sandbox
permissions:
  contents: read

env:
  NODE_ENV: sandbox

jobs:
  deploy:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    permissions:
      contents: write
      pull-requests: write
    outputs:
      api-deployment: ${{ steps.api-deployment.outputs.success }}
      db-deployment: ${{ steps.db-deployment.outputs.success }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'
          cache: 'yarn'
      - name: Cache dependencies
        uses: actions/cache@v3
        id: caching-dependencies
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - name: Install dependencies
        if: steps.caching-dependencies.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
      - name: Build
        id: api-deployment
        run: |
          echo "success=true" >> "$GITHUB_OUTPUT"
      - name: Deploy DB
        id: db-deployment
        run: |
          echo "success=true" >> "$GITHUB_OUTPUT"

  release:
    permissions:
      contents: write
      pull-requests: write
#    if: |
#      needs.deploy.outputs.api-deployment == true && needs.deploy.outputs.db-deployment == true
    needs:
      - deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'
          cache: 'yarn'
      - name: Cache dependencies
        uses: actions/cache@v3
        id: caching-dependencies
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - name: Install dependencies
        if: steps.caching-dependencies.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
      - name: Check Vars
        run: |
          echo ${{ needs.deploy.outputs.api-deployment }}
          echo ${{ needs.deploy.outputs.db-deployment }}
      - name: Release
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



